#!/bin/bash

# Gsiso AI Linux Package Builder
# This script creates packages for the distribution

set -e

VERSION="1.0.0"
PACKAGE_DIR="$(pwd)/packages"
BUILD_DIR="$(pwd)/build/packages"
REPO_DIR="$(pwd)/repo"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_header() {
    echo -e "${GREEN}"
    echo "========================================"
    echo "  Gsiso AI Linux Package Builder"
    echo "  Version: ${VERSION}"
    echo "========================================"
    echo -e "${NC}"
}

# Create package structure
create_package_structure() {
    local pkg_name=$1
    local pkg_version=$2
    local pkg_dir="${BUILD_DIR}/${pkg_name}-${pkg_version}"
    
    mkdir -p "${pkg_dir}/usr/bin"
    mkdir -p "${pkg_dir}/usr/lib"
    mkdir -p "${pkg_dir}/usr/share"
    mkdir -p "${pkg_dir}/etc"
    mkdir -p "${pkg_dir}/var"
    
    echo "${pkg_dir}"
}

# Create package metadata
create_package_metadata() {
    local pkg_dir=$1
    local pkg_name=$2
    local pkg_version=$3
    local pkg_desc=$4
    local pkg_deps=$5
    
    cat > "${pkg_dir}/.PKGINFO" << EOF
# Generated by Gsiso AI Linux Package Builder
pkgname = ${pkg_name}
pkgver = ${pkg_version}
pkgdesc = ${pkg_desc}
url = https://github.com/sisodiabhumca/gsiso-ai
builddate = $(date +%s)
packager = Gsiso AI Linux Package Builder
size = $(du -sb "${pkg_dir}" | cut -f1)
arch = x86_64
license = GPL
depend = ${pkg_deps}
EOF
}

# Build gs-pkg package
build_gs_pkg() {
    echo -e "${YELLOW}Building gs-pkg package...${NC}"
    
    local pkg_dir=$(create_package_structure "gs-pkg" "1.0.0")
    
    # Copy gs-pkg script
    cp scripts/gs-pkg "${pkg_dir}/usr/bin/"
    chmod +x "${pkg_dir}/usr/bin/gs-pkg"
    
    # Create package metadata
    create_package_metadata "${pkg_dir}" "gs-pkg" "1.0.0" "Gsiso AI Linux Package Manager" "bash"
    
    # Create package archive
    cd "${pkg_dir}"
    tar -cJf "${REPO_DIR}/gs-pkg-1.0.0.tar.xz" .
    cd - > /dev/null
    
    echo -e "${GREEN}gs-pkg package created${NC}"
}

# Build gs-update package
build_gs_update() {
    echo -e "${YELLOW}Building gs-update package...${NC}"
    
    local pkg_dir=$(create_package_structure "gs-update" "1.0.0")
    
    # Copy gs-update script
    cp scripts/gs-update "${pkg_dir}/usr/bin/"
    chmod +x "${pkg_dir}/usr/bin/gs-update"
    
    # Create package metadata
    create_package_metadata "${pkg_dir}" "gs-update" "1.0.0" "Gsiso AI Linux System Update Tool" "bash gs-pkg"
    
    # Create package archive
    cd "${pkg_dir}"
    tar -cJf "${REPO_DIR}/gs-update-1.0.0.tar.xz" .
    cd - > /dev/null
    
    echo -e "${GREEN}gs-update package created${NC}"
}

# Build gsiso-init package
build_gsiso_init() {
    echo -e "${YELLOW}Building gsiso-init package...${NC}"
    
    local pkg_dir=$(create_package_structure "gsiso-init" "1.0.0")
    
    # Copy gsiso-init script
    cp scripts/gsiso-init "${pkg_dir}/usr/bin/"
    chmod +x "${pkg_dir}/usr/bin/gsiso-init"
    
    # Copy configuration files
    cp etc/gsiso.conf "${pkg_dir}/etc/"
    
    # Create package metadata
    create_package_metadata "${pkg_dir}" "gsiso-init" "1.0.0" "Gsiso AI Linux System Initialization" "bash systemd"
    
    # Create package archive
    cd "${pkg_dir}"
    tar -cJf "${REPO_DIR}/gsiso-init-1.0.0.tar.xz" .
    cd - > /dev/null
    
    echo -e "${GREEN}gsiso-init package created${NC}"
}

# Build core packages
build_core_packages() {
    echo -e "${YELLOW}Building core packages...${NC}"
    
    # Create package directories
    mkdir -p "${BUILD_DIR}" "${REPO_DIR}"
    
    # Build system packages
    build_gs_pkg
    build_gs_update
    build_gsiso_init
    
    echo -e "${GREEN}Core packages built successfully${NC}"
}

# Create package database
create_package_database() {
    echo -e "${YELLOW}Creating package database...${NC}"
    
    # Create package list
    cat > "${REPO_DIR}/packages.db" << EOF
# Gsiso AI Linux Package Database
# Generated on: $(date)

gs-pkg-1.0.0.tar.xz
gs-update-1.0.0.tar.xz
gsiso-init-1.0.0.tar.xz
EOF
    
    # Create package index
    cat > "${REPO_DIR}/index.html" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Gsiso AI Linux Package Repository</title>
</head>
<body>
    <h1>Gsiso AI Linux Package Repository</h1>
    <p>This repository contains packages for Gsiso AI Linux.</p>
    <h2>Available Packages:</h2>
    <ul>
        <li><a href="gs-pkg-1.0.0.tar.xz">gs-pkg-1.0.0.tar.xz</a> - Package Manager</li>
        <li><a href="gs-update-1.0.0.tar.xz">gs-update-1.0.0.tar.xz</a> - System Update Tool</li>
        <li><a href="gsiso-init-1.0.0.tar.xz">gsiso-init-1.0.0.tar.xz</a> - System Initialization</li>
    </ul>
    <p>Generated on: $(date)</p>
</body>
</html>
EOF
    
    echo -e "${GREEN}Package database created${NC}"
}

# Update package manager configuration
update_package_manager() {
    echo -e "${YELLOW}Updating package manager configuration...${NC}"
    
    # Update gs-pkg to use local repository
    sed -i 's|REPO_URL="https://github.com/sisodiabhumca/gsiso-ai/releases/download/packages"|REPO_URL="file://'"${REPO_DIR}"'"|' scripts/gs-pkg
    
    echo -e "${GREEN}Package manager configuration updated${NC}"
}

# Main build process
main() {
    print_header
    
    # Check if running as root
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${RED}Error: This script must be run as root${NC}"
        exit 1
    fi
    
    build_core_packages
    create_package_database
    update_package_manager
    
    echo -e "${GREEN}"
    echo "========================================"
    echo "  Package building completed!"
    echo "  Repository: ${REPO_DIR}"
    echo "  Packages:"
    echo "    - gs-pkg-1.0.0.tar.xz"
    echo "    - gs-update-1.0.0.tar.xz"
    echo "    - gsiso-init-1.0.0.tar.xz"
    echo "========================================"
    echo -e "${NC}"
}

# Run main function
main "$@" 