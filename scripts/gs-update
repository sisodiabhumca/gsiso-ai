#!/bin/sh
# gsiso ai system update script
# This script updates the system packages and configurations

VERSION="1.0.0"
CONFIG_FILE="/etc/gsiso.conf"
LOG_FILE="/var/log/gs-update.log"
TEMP_DIR="/tmp/gs-update-$$"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "${RED}Error: This script must be run as root${NC}" >&2
    exit 1
fi

# Create temp directory
mkdir -p "$TEMP_DIR"
trap 'rm -rf "$TEMP_DIR"' EXIT

# Log function
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    log "ERROR" "$1"
    exit 1
}

# Load configuration
load_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        log "WARNING" "Configuration file $CONFIG_FILE not found, using defaults"
        return 1
    fi
    
    # Source the config file
    . "$CONFIG_FILE" || error_exit "Failed to load configuration file"
    
    # Set defaults if not defined in config
    PKG_MANAGER=${PKG_MANAGER:-gs-pkg}
    AUTO_REBOOT=${AUTO_REBOOT:-0}
    
    return 0
}

# Check for updates
check_updates() {
    log "INFO" "Checking for updates..."
    
    if ! command -v "$PKG_MANAGER" >/dev/null 2>&1; then
        error_exit "Package manager $PKG_MANAGER not found"
    fi
    
    # In a real implementation, this would check a remote repository
    # For now, we'll simulate checking for updates
    sleep 1
    
    # Simulate finding updates
    UPDATES_AVAILABLE=1
    if [ $UPDATES_AVAILABLE -eq 0 ]; then
        log "INFO" "System is up to date"
        return 1
    fi
    
    log "INFO" "Updates are available"
    return 0
}

# Apply updates
apply_updates() {
    log "INFO" "Applying updates..."
    
    # Update package database
    if ! "$PKG_MANAGER" update; then
        error_exit "Failed to update package database"
    fi
    
    # Upgrade all packages
    if ! "$PKG_MANAGER" upgrade; then
        error_exit "Failed to upgrade packages"
    fi
    
    # Additional system updates would go here
    
    log "INFO" "Updates applied successfully"
    return 0
}

# Clean up after updates
cleanup() {
    log "INFO" "Cleaning up..."
    
    # Clean package cache
    if [ -x "$PKG_MANAGER" ]; then
        "$PKG_MANAGER" clean
    fi
    
    # Remove temporary files
    rm -rf "$TEMP_DIR"
    
    log "INFO" "Cleanup complete"
}

# Main function
main() {
    log "INFO" "=== starting gsiso ai system update v$VERSION ==="
    
    # Load configuration
    load_config
    
    # Check for updates
    if ! check_updates; then
        log "INFO" "No updates available"
        cleanup
        exit 0
    fi
    
    # Apply updates
    if ! apply_updates; then
        error_exit "Failed to apply updates"
    fi
    
    # Clean up
    cleanup
    
    # Prompt for reboot if needed
    if [ "$AUTO_REBOOT" -eq 1 ]; then
        log "INFO" "Rebooting system..."
        reboot
    else
        log "INFO" "Update complete. A reboot may be required for all changes to take effect."
    fi
    
    log "INFO" "=== Update process completed ==="
}

# Run main function
main "$@"

exit 0
