#!/bin/sh
# gsiso ai package manager - gs-pkg
# a simple package manager for gsiso ai linux

VERSION="1.0.0"
PKG_DIR="/var/cache/gs-pkg/packages"
PKG_DB="/var/lib/gs-pkg/db"
REPO_URL="https://github.com/sisodiabhumca/gsiso-ai/releases/download/packages"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Ensure required directories exist
mkdir -p "$PKG_DIR" "$(dirname "$PKG_DB")"

# Check if running as root
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "${RED}Error: This command needs to be run as root${NC}" >&2
        exit 1
    fi
}

# Print usage information
usage() {
    echo "gsiso ai package manager v$VERSION"
    echo "Usage: gs-pkg [command] [options] [packages...]"
    echo ""
    echo "Commands:"
    echo "  install <package>    Install a package"
    echo "  remove <package>     Remove a package"
    echo "  update               Update package database"
    echo "  upgrade              Upgrade all packages"
    echo "  search <query>       Search for packages"
    echo "  list-installed       List installed packages"
    echo "  info <package>       Show package information"
    echo "  clean                Clean package cache"
    echo "  --version            Show version"
    echo "  --help               Show this help"
}

# Install a package
install_pkg() {
    check_root
    for pkg in "$@"; do
        echo "${GREEN}Installing $pkg...${NC}"
        # Check if package is already installed
        if grep -q "^$pkg$" "$PKG_DB" 2>/dev/null; then
            echo "${YELLOW}$pkg is already installed.${NC}"
            continue
        fi
        
        # Download and extract package
        echo "Downloading $pkg..."
        if ! wget -q "$REPO_URL/$pkg.tar.xz" -P "$PKG_DIR/"; then
            echo "${YELLOW}Warning: Package $pkg not found in repository.${NC}"
            echo "${YELLOW}This is a development version - packages may not be available yet.${NC}"
            continue
        fi
        
        echo "Installing files..."
        tar -xJf "$PKG_DIR/$pkg.tar.xz" -C "/"
        
        # Add to database
        echo "$pkg" >> "$PKG_DB"
        
        echo "${GREEN}Successfully installed $pkg${NC}"
    done
}

# Remove a package
remove_pkg() {
    check_root
    for pkg in "$@"; do
        if ! grep -q "^$pkg$" "$PKG_DB" 2>/dev/null; then
            echo "${YELLOW}$pkg is not installed.${NC}"
            continue
        fi
        
        echo "${GREEN}Removing $pkg...${NC}"
        # In a real implementation, we would remove the package files
        # This is a simplified version
        sed -i "/^$pkg$/d" "$PKG_DB"
        echo "${GREEN}Successfully removed $pkg${NC}"
    done
}

# Update package database
update_db() {
    check_root
    echo "Updating package database..."
    if wget -q "$REPO_URL/packages.db" -O "$PKG_DB"; then
        echo "${GREEN}Package database updated successfully${NC}"
    else
        echo "${YELLOW}Warning: Could not update package database.${NC}"
        echo "${YELLOW}This is a development version - repository may not be available yet.${NC}"
        # Create a basic database with core packages
        cat > "$PKG_DB" << EOF
busybox
bash
coreutils
gs-pkg
EOF
        echo "${GREEN}Created basic package database${NC}"
    fi
}

# Search for packages
search_pkg() {
    local query=$1
    echo "Searching for '$query'..."
    if [ -f "$PKG_DB" ]; then
        grep -i "$query" "$PKG_DB" || echo "${YELLOW}No packages found matching '$query'${NC}"
    else
        echo "${YELLOW}Package database not found. Run 'gs-pkg update' first.${NC}"
    fi
}

# List installed packages
list_installed() {
    if [ -f "$PKG_DB" ]; then
        echo "Installed packages:"
        cat "$PKG_DB"
    else
        echo "No packages installed."
    fi
}

# Show package information
pkg_info() {
    local pkg=$1
    echo "Package: $pkg"
    echo "Status: $(grep -q "^$pkg$" "$PKG_DB" 2>/dev/null && echo "Installed" || echo "Not installed")"
    # More package information would be available in a real implementation
}

# Clean package cache
clean_cache() {
    check_root
    echo "Cleaning package cache..."
    rm -rf "$PKG_DIR/"*.tar.xz
    echo "${GREEN}Package cache cleaned${NC}"
}

# Main command handler
case "$1" in
    install) shift; install_pkg "$@" ;;
    remove) shift; remove_pkg "$@" ;;
    update) update_db ;;
    upgrade) echo "${YELLOW}Upgrade not implemented in this version${NC}" ;;
    search) shift; search_pkg "$@" ;;
    list-installed) list_installed ;;
    info) shift; pkg_info "$@" ;;
    clean) clean_cache ;;
    --version) echo "gs-pkg v$VERSION" ;;
    --help|*) usage ;;
esac

exit 0
